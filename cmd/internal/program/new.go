package program

import (
	"fmt"
	"os"
	"path/filepath"
	"strings"

	"github.com/urfave/cli/v2"

	"github.com/infrastellar/iszi/cmd/internal/base"
)

var (
	flagAccountId, flagRegion string

	SubCmdNew = &cli.Command{
		Name:  "new",
		Usage: "Create a new Infrastellar Space Program for infrastructure",
		Description: `Create a new program for managing infrastructure.

An Infrastellar Space Program is an opinionated structure for managing a
production infrastructure on "day 2". The original program design was
focused on Terraform but any set of tooling can be used as long as it is
supported by ISZI (Infrastellar Systems Zeropoint Interface).`,
		Flags: []cli.Flag{
			&cli.StringFlag{
				Name:        "account-id",
				Aliases:     []string{"a"},
				Usage:       "Provide the AWS Account ID for the main (root) account for the program.",
				Destination: &flagAccountId,
			},
			&cli.StringFlag{
				Name:        "region",
				Aliases:     []string{"r"},
				Usage:       "Provide the AWS Region to be used as the main (root) region for the program.",
				Destination: &flagAccountId,
			},
		},
		Action: func(cCtx *cli.Context) error {
			err := newProgram(cCtx)
			if err != nil {
				return err
			}
			return nil
		},
	}
)

func newProgram(cCtx *cli.Context) error {
	var nprg, nprgpath string

	nprg = cCtx.Args().Get(0)
	nprgpath = filepath.Join(".", nprg)

	program := &base.Program{
		Name: nprg,
		Path: nprgpath,
		RootAccount: base.Root{
			AccountId: flagAccountId,
			Region:    flagRegion,
		},
	}

	if _, err := os.Stat(nprgpath); os.IsNotExist(err) {
		err = os.MkdirAll(nprgpath, 0750)
		if err != nil {
			return err
		}
	}

	err := os.Chdir(nprgpath)
	if err != nil {
		return err
	}

	fmt.Printf("Create a new infrastructure program: %s\n", strings.ToUpper(nprg))

	fPath, err := os.Getwd()
	if err != nil {
		return err
	}

	for _, dir := range ProgramDirs {
		newdir := filepath.Join(".", dir)
		err = os.MkdirAll(newdir, 0750)
		if err != nil {
			return err
		}
	}

	// TODO(asenchi): Think about episode modules adding to the gitignore
	gitignoreHeader := fmt.Sprintf("# gitignore generated by %s\n", base.CommandName)
	err = os.WriteFile(".gitignore", []byte(gitignoreHeader), 0640)
	if err != nil {
		return err
	}

	err = base.ConfigUpdatePrograms(program)
	if err != nil {
		return err
	}

	fmt.Println("Infrastellar Space Program created!")
	fmt.Println("")
	fmt.Println("In order to start using this program, run the following:")
	fmt.Printf("\texport %s=%s\n", base.EnvVarProgram, fPath)
	return nil
}
